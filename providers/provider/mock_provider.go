// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/bionic-dev/bionic/providers/provider (interfaces: Provider)

// Package provider is a generated GoMock package.
package provider

import (
	gomock "github.com/golang/mock/gomock"
	gorm "gorm.io/gorm"
	reflect "reflect"
)

// MockProvider is a mock of Provider interface
type MockProvider struct {
	ctrl     *gomock.Controller
	recorder *MockProviderMockRecorder
}

// MockProviderMockRecorder is the mock recorder for MockProvider
type MockProviderMockRecorder struct {
	mock *MockProvider
}

// NewMockProvider creates a new mock instance
func NewMockProvider(ctrl *gomock.Controller) *MockProvider {
	mock := &MockProvider{ctrl: ctrl}
	mock.recorder = &MockProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockProvider) EXPECT() *MockProviderMockRecorder {
	return m.recorder
}

// BeginTx mocks base method
func (m *MockProvider) BeginTx() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BeginTx")
	ret0, _ := ret[0].(error)
	return ret0
}

// BeginTx indicates an expected call of BeginTx
func (mr *MockProviderMockRecorder) BeginTx() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BeginTx", reflect.TypeOf((*MockProvider)(nil).BeginTx))
}

// CommitTx mocks base method
func (m *MockProvider) CommitTx() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CommitTx")
	ret0, _ := ret[0].(error)
	return ret0
}

// CommitTx indicates an expected call of CommitTx
func (mr *MockProviderMockRecorder) CommitTx() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CommitTx", reflect.TypeOf((*MockProvider)(nil).CommitTx))
}

// DB mocks base method
func (m *MockProvider) DB() *gorm.DB {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DB")
	ret0, _ := ret[0].(*gorm.DB)
	return ret0
}

// DB indicates an expected call of DB
func (mr *MockProviderMockRecorder) DB() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DB", reflect.TypeOf((*MockProvider)(nil).DB))
}

// ImportFns mocks base method
func (m *MockProvider) ImportFns(arg0 string) ([]ImportFn, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ImportFns", arg0)
	ret0, _ := ret[0].([]ImportFn)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ImportFns indicates an expected call of ImportFns
func (mr *MockProviderMockRecorder) ImportFns(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ImportFns", reflect.TypeOf((*MockProvider)(nil).ImportFns), arg0)
}

// Migrate mocks base method
func (m *MockProvider) Migrate() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Migrate")
	ret0, _ := ret[0].(error)
	return ret0
}

// Migrate indicates an expected call of Migrate
func (mr *MockProviderMockRecorder) Migrate() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Migrate", reflect.TypeOf((*MockProvider)(nil).Migrate))
}

// Name mocks base method
func (m *MockProvider) Name() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name
func (mr *MockProviderMockRecorder) Name() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockProvider)(nil).Name))
}

// RollbackTx mocks base method
func (m *MockProvider) RollbackTx() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RollbackTx")
	ret0, _ := ret[0].(error)
	return ret0
}

// RollbackTx indicates an expected call of RollbackTx
func (mr *MockProviderMockRecorder) RollbackTx() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RollbackTx", reflect.TypeOf((*MockProvider)(nil).RollbackTx))
}

// TablePrefix mocks base method
func (m *MockProvider) TablePrefix() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TablePrefix")
	ret0, _ := ret[0].(string)
	return ret0
}

// TablePrefix indicates an expected call of TablePrefix
func (mr *MockProviderMockRecorder) TablePrefix() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TablePrefix", reflect.TypeOf((*MockProvider)(nil).TablePrefix))
}
